$projectRoot = "D:\desa-ngebruk"

$excludePaths = @(
    "node_modules",
    ".next",
    "dist",
    "build",
    ".git",
    "public"
)

$tsFiles = Get-ChildItem -Path $projectRoot -Filter "*.ts" -Recurse -ErrorAction SilentlyContinue | Where-Object {
    $filePath = $_.FullName
    $shouldInclude = $true
    
    foreach ($excludePath in $excludePaths) {
        if ($filePath -match [regex]::Escape("$projectRoot\$excludePath")) {
            $shouldInclude = $false
            break
        }
    }
    
    $shouldInclude
}

$tsxFiles = Get-ChildItem -Path $projectRoot -Filter "*.tsx" -Recurse -ErrorAction SilentlyContinue | Where-Object {
    $filePath = $_.FullName
    $shouldInclude = $true
    
    foreach ($excludePath in $excludePaths) {
        if ($filePath -match [regex]::Escape("$projectRoot\$excludePath")) {
            $shouldInclude = $false
            break
        }
    }
    
    $shouldInclude
}

$files = $tsFiles + $tsxFiles

function Is-ImportantComment {
    param (
        [string]$commentText
    )
    
    $cleanedText = $commentText -replace '\{\s*/\*|\*/\s*\}', ''
    
    $patterns = @(
        'godoc',
        'swagger:',
        # '@\w+',
        '\+\w+',
        'TODO:',
        'FIXME:',
        'NOTE:',
        'filepath:',
        'license',
        'copyright',
        'eslint',
        'tslint',
        'nosonar',
        'istanbul',
        'pragma',
        'ts-ignore',
        'ts-expect-error',
        'ts-nocheck',
        'react-'
    )
    
    foreach ($pattern in $patterns) {
        if ($cleanedText -match $pattern) {
            return $true
        }
    }
    
    return $false
}

$totalProcessed = 0
$totalModified = 0
$skippedFiles = 0

$importantFilePatterns = @(
    "\.config\.",
    "next\.config\.js",
    "tsconfig\.json",
    "package\.json",
    "webpack",
    "babel",
    "eslint",
    "jest",
    "setup",
    "polyfill",
    "environment"
)

foreach ($file in $files) {
    $isImportantFile = $false
    foreach ($pattern in $importantFilePatterns) {
        if ($file.Name -match $pattern) {
            $isImportantFile = $true
            break
        }
    }
    
    if ($isImportantFile) {
        Write-Host "Skipping important file: $($file.FullName)" -ForegroundColor Yellow
        $skippedFiles++
        continue
    }
    
    Write-Host "Processing: $($file.FullName)"
    $totalProcessed++
    
    $content = Get-Content -Path $file.FullName -Raw
    $lines = $content -split "`r`n|\r|\n"
    $newLines = @()
    $fileModified = $false
    
    $firstFewLines = ($lines | Select-Object -First 10) -join " "
    if ($firstFewLines -match "(generated|autogenerated|@generated|DO NOT EDIT|DO NOT MODIFY)") {
        Write-Host "  Skipping generated file" -ForegroundColor Yellow
        $skippedFiles++
        continue
    }
    
    for ($lineIndex = 0; $lineIndex -lt $lines.Length; $lineIndex++) {
        $line = $lines[$lineIndex]
        
        if ([string]::IsNullOrWhiteSpace($line)) {
            $newLines += $line
            continue
        }
        
        if ($line -match '^\s*//') {
            if (Is-ImportantComment -commentText $line) {
                $newLines += $line
            } else {
                $fileModified = $true
            }
            continue
        }
        
        if ($line -match '\{\s*/\*.*?\*/\s*\}') {
            $jsxCommentMatches = [regex]::Matches($line, '\{\s*/\*.*?\*/\s*\}')
            $lineToKeep = $line
            $hasModifiedLine = $false
            
            foreach ($match in $jsxCommentMatches) {
                $jsxComment = $match.Value
                if (-not (Is-ImportantComment -commentText $jsxComment)) {
                    $lineToKeep = $lineToKeep.Replace($jsxComment, '')
                    $hasModifiedLine = $true
                }
            }
            
            if ($hasModifiedLine) {
                $newLines += $lineToKeep.TrimEnd()
                $fileModified = $true
            } else {
                $newLines += $line
            }
            continue
        }
        
        if ($line -match '^\s*/\*') {
            $commentBlockLines = @($line)
            $isImportantBlock = Is-ImportantComment -commentText $line
            
            while ($lineIndex + 1 -lt $lines.Length -and -not ($lines[$lineIndex] -match '\*/\s*$')) {
                $lineIndex++ 
                $commentBlockLines += $lines[$lineIndex]
                
                if (-not $isImportantBlock -and (Is-ImportantComment -commentText $lines[$lineIndex])) {
                    $isImportantBlock = $true
                }
            }
            
            if ($isImportantBlock) {
                $newLines += $commentBlockLines
            } else {
                $fileModified = $true
            }
            continue
        }
        
        if ($line -match '\{\s*/\*' -and -not ($line -match '\*/\s*\}')) {
            $jsxCommentBlockLines = @($line)
            $isImportantBlock = Is-ImportantComment -commentText $line
            
            while ($lineIndex + 1 -lt $lines.Length -and -not ($lines[$lineIndex] -match '\*/\s*\}')) {
                $lineIndex++
                $jsxCommentBlockLines += $lines[$lineIndex]
                
                if (-not $isImportantBlock -and (Is-ImportantComment -commentText $lines[$lineIndex])) {
                    $isImportantBlock = $true
                }
            }
            
            if ($isImportantBlock) {
                $newLines += $jsxCommentBlockLines
            } else {
                $fileModified = $true
            }
            continue
        }
        
        $commentPos = -1
        $inString = $false
        $stringChar = ''
        $escape = $false
        $inTemplateString = $false
        
        for ($i = 0; $i -lt $line.Length - 1; $i++) {
            $char = $line[$i]
            $nextChar = $line[$i + 1]
            
            if ($char -eq '`' -and -not $escape) {
                $inTemplateString = -not $inTemplateString
            } elseif (($char -eq '"' -or $char -eq "'") -and -not $escape -and -not $inTemplateString) {
                if (-not $inString) {
                    $inString = $true
                    $stringChar = $char
                } elseif ($char -eq $stringChar) {
                    $inString = $false
                }
            }
            
            $escape = ($char -eq '\' -and -not $escape)
            
            if (-not $inString -and -not $inTemplateString -and $char -eq '/' -and $nextChar -eq '/') {
                $commentPos = $i
                break
            }
        }
        
        if ($commentPos -eq -1) {
            $newLines += $line
            continue
        }
        
        $commentPart = $line.Substring($commentPos)
        $codePart = $line.Substring(0, $commentPos).TrimEnd()
        
        $hasUrl = $commentPart -match 'https?://'
        
        if ($hasUrl -or (Is-ImportantComment -commentText $commentPart)) {
            $newLines += $line
        } else {
            $newLines += $codePart
            $fileModified = $true
        }
    }
    
    if ($fileModified) {
        $totalModified++
        Set-Content -Path $file.FullName -Value ($newLines -join [Environment]::NewLine)
        Write-Host "  Modified: Comments removed" -ForegroundColor Green
    } else {
        Write-Host "  Unchanged: No comments removed" -ForegroundColor Gray
    }
}

Write-Host "`nSummary:" -ForegroundColor Cyan
Write-Host "Files processed: $totalProcessed" -ForegroundColor White
Write-Host "Files modified: $totalModified" -ForegroundColor Green
Write-Host "Files skipped: $skippedFiles" -ForegroundColor Yellow
Write-Host "`nComment removal completed! Important comments were preserved." -ForegroundColor Cyan
Write-Host "Node modules and important components were protected from modification." -ForegroundColor Cyan
Write-Host "JSX style comments have also been processed and cleaned." -ForegroundColor Cyan